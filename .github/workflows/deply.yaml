name: Deploy to AWS CloudFront and Infrastructure
on:
  push:
    branches: [main]
  # Optionally enable manual triggers with control parameters
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy infrastructure changes with Terraform'
        required: true
        default: 'false'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend to CloudFront'
        required: true
        default: 'false'
        type: boolean

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
      
      - name: Create .env file
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_API_KEY=${{ secrets.VITE_API_KEY }}" >> .env
      
      - name: Install dependencies
        run: npm install
      
      - name: Build
        run: npm run build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      # Only run frontend deployment if deploy_frontend is true (default) or not specified
      - name: Deploy to S3
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_frontend == 'true' }}
        run: |
          aws s3 sync ./dist/ s3://${{ secrets.S3_BUCKET }} --delete
      
      - name: Create CloudFront invalidation
        if: ${{ github.event_name != 'workflow_dispatch' || github.event.inputs.deploy_frontend == 'true' }}
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  terraform-deploy:
    runs-on: ubuntu-latest
    # Only run if explicitly enabled through workflow_dispatch
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Create terraform.tfvars file
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ secrets.AWS_REGION }}"
          lambda_function_name = "${{ secrets.LAMBDA_FUNCTION_NAME }}"
          lambda_handler = "${{ secrets.LAMBDA_HANDLER }}"
          lambda_zip_file = "lambda_function.zip"
          api_stage_name = "${{ secrets.API_STAGE_NAME }}"
          EOF
      
      - name: Package Lambda function
        run: |
          chmod +x package.sh
          ./package.sh
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        run: terraform plan -no-color
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
