name: Deploy to AWS CloudFront and Infrastructure
on:
  # Automatic deployments on push to main (frontend only by default)
  push:
    branches: [main]
    paths-ignore:
      - "**/*.tf" # Ignore Terraform file changes on push
      - "terraform/**"
      - "infrastructure/**"
      - ".github/workflows/**"

  # Manual trigger with toggles for both deployments
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: "Deploy infrastructure changes with Terraform"
        required: true
        default: false
        type: boolean
      deploy_frontend:
        description: "Deploy frontend to CloudFront"
        required: true
        default: true
        type: boolean
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
          - development

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    # Run this job only if push event or if deploy_frontend is true in manual trigger
    if: ${{ github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_frontend == 'true') }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Create .env file
        run: |
          echo "VITE_API_URL=${{ secrets.VITE_API_URL }}" >> .env
          echo "VITE_API_KEY=${{ secrets.VITE_API_KEY }}" >> .env
          # Add environment-specific variables
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "VITE_API_URL=${{ secrets.STAGING_API_URL }}" > .env
            echo "VITE_API_KEY=${{ secrets.STAGING_API_KEY }}" >> .env
          elif [ "${{ github.event.inputs.environment }}" == "development" ]; then
            echo "VITE_API_URL=${{ secrets.DEV_API_URL }}" > .env
            echo "VITE_API_KEY=${{ secrets.DEV_API_KEY }}" >> .env
          fi

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set deployment variables
        id: set-vars
        run: |
          # Default to production values
          S3_BUCKET="${{ secrets.S3_BUCKET }}"
          CLOUDFRONT_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"

          # Override with environment-specific values if available
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            S3_BUCKET="${{ secrets.STAGING_S3_BUCKET }}"
            CLOUDFRONT_ID="${{ secrets.STAGING_CLOUDFRONT_DISTRIBUTION_ID }}"
          elif [ "${{ github.event.inputs.environment }}" == "development" ]; then
            S3_BUCKET="${{ secrets.DEV_S3_BUCKET }}"
            CLOUDFRONT_ID="${{ secrets.DEV_CLOUDFRONT_DISTRIBUTION_ID }}"
          fi

          echo "s3_bucket=$S3_BUCKET" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$CLOUDFRONT_ID" >> $GITHUB_OUTPUT

      - name: Deploy to S3
        run: |
          aws s3 sync ./dist/ s3://${{ steps.set-vars.outputs.s3_bucket }} --delete

      - name: Create CloudFront invalidation
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.set-vars.outputs.cloudfront_id }} --paths "/*"

  terraform-deploy:
    runs-on: ubuntu-latest
    # Only run if explicitly enabled through workflow_dispatch with infrastructure toggle
    if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.deploy_infrastructure == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set infrastructure variables
        id: set-tf-vars
        run: |
          # Default terraform directory
          TF_DIR="./terraform"

          # Select environment-specific directory if it exists
          if [ "${{ github.event.inputs.environment }}" == "staging" ] && [ -d "./terraform/staging" ]; then
            TF_DIR="./terraform/staging"
          elif [ "${{ github.event.inputs.environment }}" == "development" ] && [ -d "./terraform/dev" ]; then
            TF_DIR="./terraform/dev"
          elif [ "${{ github.event.inputs.environment }}" == "production" ] && [ -d "./terraform/prod" ]; then
            TF_DIR="./terraform/prod"
          fi

          echo "tf_dir=$TF_DIR" >> $GITHUB_OUTPUT

      - name: Create terraform.tfvars file
        working-directory: ${{ steps.set-tf-vars.outputs.tf_dir }}
        run: |
          cat > terraform.tfvars << EOF
          aws_region = "${{ secrets.AWS_REGION }}"
          lambda_function_name = "${{ secrets.LAMBDA_FUNCTION_NAME }}"
          lambda_handler = "${{ secrets.LAMBDA_HANDLER }}"
          lambda_zip_file = "lambda_function.zip"
          api_stage_name = "${{ secrets.API_STAGE_NAME }}"

          # Add environment-specific variables
          environment = "${{ github.event.inputs.environment }}"
          EOF

          # Add environment-specific secrets
          if [ "${{ github.event.inputs.environment }}" == "staging" ]; then
            echo "lambda_function_name = \"${{ secrets.STAGING_LAMBDA_FUNCTION_NAME }}\"" >> terraform.tfvars
            echo "api_stage_name = \"${{ secrets.STAGING_API_STAGE_NAME }}\"" >> terraform.tfvars
          elif [ "${{ github.event.inputs.environment }}" == "development" ]; then
            echo "lambda_function_name = \"${{ secrets.DEV_LAMBDA_FUNCTION_NAME }}\"" >> terraform.tfvars
            echo "api_stage_name = \"${{ secrets.DEV_API_STAGE_NAME }}\"" >> terraform.tfvars
          fi

      - name: Package Lambda function
        run: |
          chmod +x package.sh
          ./package.sh

      - name: Terraform Init
        working-directory: ${{ steps.set-tf-vars.outputs.tf_dir }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ steps.set-tf-vars.outputs.tf_dir }}
        run: terraform plan -no-color

      - name: Terraform Apply
        working-directory: ${{ steps.set-tf-vars.outputs.tf_dir }}
        run: terraform apply -auto-approve
